#summary GWT-Validation Requirements
#labels Phase-Requirements,Featured

= Functional Requirements =
 * The [GWTVF] API shall conform to basic aspects of the JSR-303 specification
  *  A constraint specifies:
   *   The class that implements the checking of the constraint.
   *   Parameters to initialize the parameters of the constraint.
   *   The groups under which the constraint should be checked.
   *   The message to be returned when the specified constraint fails.
  *  The user shall be able to annotate the following with constraints:
   *   Classes
   *   Fields
   *   Methods
  *  The Validation procedure will follow the methodology and ordering as specified by JSR-303.
  *  The API shall implement the GroupSequence annotation as specified by JSR-303.
   *   GroupSequence shall have a group name.
   *   GroupSequence shall specify a sequence of groupings to run.
  *  The API shall provide identical validation procedures for the client side JavaScript and pure JVM code.
  *  The user shall be able to correlate messages on constraints to external message strings.
   *   Intended to support internationalization or multiple sites sharing the same validation.
   *   The API shall provide this support through the standard internationalization package of GWT.
  * The API shall return to the user a Set of [InvalidConstraint]s when an a given object is validated by a created Validator.

= Nonfunctional Requirements =
 * The API shall be released with documentation generated by the javadoc system.
 * The API shall function with Java5 and Java6
 * The API shall work on Unix, Windows, OSX, and any other platform that GWT can be developed on.
 * The API shall provide support for user compiled code on Firefox 3.0+, Chrome, IE7+, Safari 3.1+, Opera 9+
 * The API shall not add excessive overhead to JVM or client side validation.
  *  Less than .25s for common validation tasks (under the following conditions).
   *   String manipulation.
   *   Math.
   *   Comparisons.
   *   Recursive depth of 3.
   *   Less than 4 parent classes or interfaces.
   *   Less than 40 constraints total.
  *  Less than 1.0s overhead in the JVM for bootstrapping a given validator class.